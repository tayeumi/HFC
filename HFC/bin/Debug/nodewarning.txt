<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
	<meta http-equiv="X-UA-Compatible" content="IE=8" />
    <meta charset="utf-8">
	_meta
    <title>Node Down</title>
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>

// This example creates circles on the map, representing populations in North
// America.

// First, create an object containing LatLng and population for each city.
var citymap = {
  _node
};
// add path
	
	_addpath
	
function initMap() {
  // Create the map.
   // loadfirst
  _first
  //var first = new google.maps.LatLng(41.850, -87.650);
  var map = new google.maps.Map(document.getElementById('map'), {
     zoom: 14,
     center:first,
    mapTypeId: google.maps.MapTypeId.TERRAIN
  });	
  
  // Construct the circle for each value in citymap.
  // Note: We scale the area of the circle based on the population.
  for (var city in citymap) {
    // Add the circle for this city to the map.
    var cityCircle = new google.maps.Circle({
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#FF0000',
      fillOpacity: 0.35,
      map: map,
      center: citymap[city].center,
      radius: 50
    });	
  }  
  
  _addline
  
  _addinfo
  /*
   var coordInfoWindow = new google.maps.InfoWindow();
  coordInfoWindow.setContent(createInfoWindowContent(first, map.getZoom(),'chao'));
  coordInfoWindow.setPosition(first);
  coordInfoWindow.open(map);
  
  map.addListener('zoom_changed', function() {
    coordInfoWindow.setContent(createInfoWindowContent(first, map.getZoom(),'chào'));
    coordInfoWindow.open(map);	
  });
  */
}
var TILE_SIZE = 256;

function createInfoWindowContent(latLng, zoom,info) {
  var scale = 1 << zoom;

  var worldCoordinate = project(latLng);

  var pixelCoordinate = new google.maps.Point(
      Math.floor(worldCoordinate.x * scale),
      Math.floor(worldCoordinate.y * scale));

  var tileCoordinate = new google.maps.Point(
      Math.floor(worldCoordinate.x * scale / TILE_SIZE),
      Math.floor(worldCoordinate.y * scale / TILE_SIZE));

  return info;
}

// The mapping between latitude, longitude and pixels is defined by the web
// mercator projection.
function project(latLng) {
  var siny = Math.sin(latLng.lat() * Math.PI / 180);

  // Truncating to 0.9999 effectively limits latitude to 89.189. This is
  // about a third of a tile past the edge of the world tile.
  siny = Math.min(Math.max(siny, -0.9999), 0.9999);

  return new google.maps.Point(
      TILE_SIZE * (0.5 + latLng.lng() / 360),
      TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI)));
}
    </script>
    <script async defer
        src="https://maps.googleapis.com/maps/api/js?signed_in=true&callback=initMap"></script>
  </body>
</html>